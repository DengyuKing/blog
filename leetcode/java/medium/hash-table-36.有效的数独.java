/*
 * @lc app=leetcode.cn id=36 lang=java
 *
 * [36] 有效的数独
 *
 * https://leetcode-cn.com/problems/valid-sudoku/description/
 *
 * algorithms
 * Medium (64.09%)
 * Likes:    661
 * Dislikes: 0
 * Total Accepted:    206.2K
 * Total Submissions: 322K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * 
 * 
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 
 * 
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 
 * 注意：
 * 
 * 
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：board = 
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 * 
 * 
 * 示例 2：
 * 
 * 
 * 输入：board = 
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在,
 * 因此这个数独是无效的。
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 * 行 ， 列，单元格，组成了一个坐标，每个数字，行列和单元都不能相同
 * 
 */

// @lc code=start
class Solution {
        public boolean isValidSudoku(char[][] board) {
            Grid [] grid = new Grid[10];
            for (int i = 1;i<=9;i++) {
                grid[i] = new Grid();
            }
    
            for (int i = 0;i<9;i++) {
                for (int j = 0;j<9;j++) {
                    if ('0'>board[i][j] || board[i][j]>'9') {
                        continue;
                    }
    
                    if (grid[board[i][j]-'0'].iSet.contains(i)) {
                        return false;
                    }else {
                        grid[board[i][j]-'0'].iSet.add(i);
                    }
    
                    if (grid[board[i][j]-'0'].jSet.contains(j)) {
                        return false;
                    }else {
                        grid[board[i][j]-'0'].jSet.add(j);
                    }
    
                    int g = getGrid(i, j);
    
                    if (grid[board[i][j]-'0'].gSet.contains(g)) {
                        return false;
                    }else {
                        grid[board[i][j]-'0'].gSet.add(g);
                    }
    
                }
            }
    
            return true;
    
        }
    
        int getGrid(int i, int j) {
            int sum = 0;
            if (3<=i && i<=5){
                sum += 1;
            }else if (6<=i &&i<=8) {
                sum +=2;
            }
    
            if (3<=j && j<=5){
                sum += 3;
            }else if (6<=j &&j<=8) {
                sum +=6;
            }
    
            return sum;
        }
    
        class Grid {
            public Set<Integer> iSet = new HashSet();
            public Set<Integer> jSet = new HashSet();
            public Set<Integer> gSet = new HashSet();
        }
}
// @lc code=end

